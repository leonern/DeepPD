import torch
import numpy as np


###################################################################################################################################################################
#### 生物特征处理

energy = [ #21*20
[0.0,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0],
[-1.65, -2.83,  1.16,	1.80,	-3.73,	-0.41,	1.90,	-3.69,	0.49,	-3.01,	-2.08,	0.66,	1.54,	1.20,	0.98,   -0.08,  0.46,   -2.31,	0.32,	-4.62],
[-2.83,	-39.58,	-0.82,	-0.53,	-3.07,	-2.96,	-4.98,	0.34,	-1.38,	-2.15,	1.43,	-4.18,	-2.13,	-2.91,	-0.41,	-2.33,	-1.84,	-0.16,	4.26,	-4.46],
[1.16,	-0.82,	0.84,	1.97,	-0.92,	0.88,	-1.07,	0.68,	-1.93,	0.23,	0.61,	0.32,	3.31,	2.67,	-2.02,	0.91,	-0.65,	0.94,	-0.71,	0.90],
[1.80,	-0.53,	1.97,	1.45,	0.94,	1.31,	0.61,	1.30,	-2.51,	1.14,	2.53,	0.20,	1.44,	0.10,	-3.13,	0.81,	1.54,	0.12,	-1.07,	1.29],
[-3.73,	-3.07,	-0.92,	0.94,	-11.25,	0.35,	-3.57,	-5.88,	-0.82,	-8.59,	-5.34,	0.73,	0.32,	0.77,	-0.40,	-2.22,	0.11,	-7.05,	-7.09,	-8.80],
[-0.41,	-2.96,	0.88,	1.31,	0.35,	-0.20,	1.09,	-0.65,	-0.16,	-0.55,	-0.52,	-0.32,	2.25,	1.11,	0.84,	0.71,	0.59,	-0.38,	1.69,	-1.90],
[1.90,	-4.98,	-1.07,	0.61,	-3.57,	1.09,	1.97,	-0.71,	2.89,	-0.86,	-0.75,	1.84,	0.35,	2.64,	2.05,	0.82,	-0.01,	0.27,	-7.58,	-3.20],
[-3.69,	0.34,	0.68,	1.30,	-5.88,	-0.65,	-0.71,	-6.74,	-0.01,	-9.01,	-3.62,	-0.07,	0.12,	-0.18,	0.19,	-0.15,	0.63,	-6.54,	-3.78,	-5.26],
[0.49,	-1.38,	-1.93,	-2.51,	-0.82,	-0.16,	2.89,	-0.01,	1.24,	0.49,	1.61,	1.12,	0.51,	0.43,	2.34,	0.19,	-1.11,	0.19,	0.02,	-1.19],
[-3.01,	-2.15,	0.23,	1.14,	-8.59,	-0.55,	-0.86,	-9.01,	0.49,	-6.37,	-2.88,	0.97,	1.81,	-0.58,	-0.60,	-0.41,	0.72,	-5.43,	-8.31,	-4.90],
[-2.08,	1.43,	0.61,	2.53,	-5.34,	-0.52,	-0.75,	-3.62,	1.61,	-2.88,	-6.49,	0.21,	0.75,	1.90,	2.09,	1.39,	0.63,	-2.59,	-6.88,	-9.73],
[0.66,	-4.18,	0.32,	0.20,	0.73,	-0.32,	1.84,	-0.07,	1.12,	0.97,	0.21,	0.61,	1.15,	1.28,	1.08,	0.29,	0.46,	0.93,	-0.74,	0.93],
[1.54,	-2.13,	3.31,	1.44,	0.32,	2.25,	0.35,	0.12,	0.51,	1.81,	0.75,	1.15,	-0.42,	2.97,	1.06,	1.12,	1.65,	0.38,	-2.06,	-2.09],
[1.20,	-2.91,	2.67,	0.10,	0.77,	1.11,	2.64,	-0.18,	0.43,	-0.58,	1.90,	1.28,	2.97,	-1.54,	0.91,	0.85,	-0.07,	-1.91,	-0.76,	0.01],
[0.98,	-0.41,	-2.02,	-3.13,	-0.40,	0.84,	2.05,	0.19,	2.34,	-0.60,	2.09,	1.08,	1.06,	0.91,	0.21,	0.95,	0.98,	0.08,	-5.89,	0.36],
[-0.08,	-2.33,	0.91,	0.81,	-2.22,	0.71,	0.82,	-0.15,	0.19,	-0.41,	1.39,	0.29,	1.12,	0.85,	0.95,	-0.48,	-0.06,	0.13,	-3.03,	-0.82],
[0.46,	-1.84,	-0.65,	1.54,	0.11,	0.59,	-0.01,	0.63,	-1.11,	0.72,	0.63,	0.46,	1.65,	-0.07,	0.98,	-0.06,	-0.96,	1.14,	-0.65,	-0.37],
[-2.31,	-0.16,	0.94,	0.12,	-7.05,	-0.38,	0.27,	-6.54,	0.19,	-5.43,	-2.59,	0.93,	0.38,	-1.91,	0.08,	0.13,	1.14,	-4.82,	-2.13,	-3.59],
[0.32,	4.26,	-0.71,	-1.07,	-7.09,	1.69,	-7.58,	-3.78,	0.02,	-8.31,	-6.88,	-0.74,	-2.06,	-0.76,	-5.89,	-3.03,	-0.65,	-2.13,	-1.73,	-12.39],
[-4.62,	-4.46,	0.90,	1.29,	-8.80,	-1.90,	-3.20,	-5.26,	-1.19,	-4.90,	-9.73,	0.93,	-2.09,	0.01,	0.36,	-0.82,	-0.37,	-3.59,	-12.39,	-2.68]
]

physicochemical = [ #21*20
    [-0.4, -0.5, 15, 8.1,  0.046, 0.67,  1.28, 0.3,  0,    0.687, 115, 0.28, 154.330012, 27.5, 1.181, 0.0072,0,0,0,0],
    [0.17, -1,   47, 5.5,  0.128, 0.38,  1.77, 0.9,  2.75, 0.263, 135, 0.28, 219.789,    44.6, 1.461, -0.037,0,0,0,0],
    [-1.31, 3.0, 59, 13.0, 0.105, -1.2,  1.6, -0.6,  1.38, 0.632, 150, 0.21, 194.910002, 40.0, 1.587, 0.0238,0,0,0,0],
    [-1.22, 3.0, 73, 12.3, 0.151, -0.76, 1.56, -0.7, 0.92, 0.669, 190, 0.33, 223.160,    62,   1.862, 0.0068,0,0,0,0],
    [1.92, -2.5, 91, 5.2,  0.29,  2.3,   2.94, 0.5,  0,    0.577, 210, 2.18, 204.7,      115.5,2.228, 0.0376,0,0,0,0],
    [-0.67, 0,   1,  9,    0,     0,     0,    0.3,  0.74, 0.67,  75,  0.18, 127.9,      0,    0.881, 0.179,0,0,0,0],
    [-0.64, -0.5,82, 10.4, 0.23,  0.64,  2.99, -0.1, 0.58, 0.594, 195, 0.21, 242.539,    79,   2.025, -0.011,0,0,0,0],
    [1.25, -1.5, 57, 5.2,  0.186, 1.9,   4.19, 0.7,  0,    0.564, 175, 0.82, 233.210,    93.5, 1.81,  0.0216,0,0,0,0],
    [-0.67, 3,   73, 11.3, 0.219, -0.57, 1.89, -1.8, 0.33, 0.407, 200, 0.09, 300.459,    100,  2.258, 0.0177,0,0,0,0],
    [1.22, -1.8, 57, 4.9,  0.186, 1.9,   2.59, 0.5,  0,    0.541, 170, 1,    232.3,      93.5, 1.931, 0.0517,0,0,0,0],
    [1.02, -1.3, 75, 5.7,  0.0221, 2.4,  2.35, 0.4,  0,    0.328, 185, 0.74, 202.699,    94.1, 2.034, 0.0027,0,0,0,0],
    [-0.92, 0.2, 58, 11.6, 0.134, -0.61, 1.6,  -0.5, 1.33, 0.489, 160, 0.25, 207.899,    58.7, 1.655, 0.0054,0,0,0,0],
    [-0.49, 0,   42, 8.0,  0.131, 102,   2.67, -0.3, 0.39, 0.600, 145, 0.39, 179.929,    41.9, 1.468, 0.239,0,0,0,0],
    [-0.91, 0.2, 72, 10.5, 0.180, -0.22, 1.56, -0.7, 0.9,  0.527, 183, 0.35, 235.509,    80.7, 1.932, 0.0692,0,0,0,0],
    [-0.59, 3,   101,10.5, 0.291, -2.10, 2.34, -1.4, 0.64, 0.591, 225, 0.1,  341.0,      105,  2.56,  0.0436,0,0,0,0],
    [-0.55, 0.3, 31, 9.2,  0.062, 0.01,  1.31, -0.1, 1.41, 0.693, 116, 0.12, 174.059,    29.3, 1.298, 0.0043,0,0,0,0],
    [-0.28, -0.4,45, 8.6,  0.108, 0.52,  3.03, -0.2, 0.71, 0.713, 142, 0.21, 205.5,      51.3, 1.525, 0.034,0,0,0,0],
    [0.91, -1.5, 43, 5.9,  0.14,  1.5,   3.67, 0.6,  0,    0.529, 157, 0.6,  207,        71.5, 1.645, 0.057,0,0,0,0],
    [0.5,  -3.4, 130,5.4,  0.409, 2.6,   3.21, 0.3,  0.12, 0.632, 258, 5.7,  237,        145.5,2.663, 0.058,0,0,0,0],
    [1.67, -2.3, 107,6.2,  0.298, 1.6,   2.94, -0.4, 0.21, 0.493, 234, 1.26, 229.14,     117.3,2.368, 0.0236,0,0,0,0],
    [0.0,   0.0, 0.0,0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,   0.0, 0.0,  0.0,        0.0,  0.0,   0.0,0.0,0.0,0.0,0.0]
]


RE = {'1':0,'2':1,'3':2,'4':3,'5':4,'6':5,'7':6,'8':7,'9':8,'10':9,'11':10,'12':11,'13':12,'14':13,'15':14,'16':15,'17':16,'18':17,'19':18,'20':19}

def RECMEncoding(inputdata):
    seq = inputdata.tolist()
    RECMT=[]
    for x in seq:
      oneTi = energy[x]
      RECMT.append(oneTi)
    return RECMT   #30*20 //40*20 //79,20

def RECMcompositionEncoding(inputdata):
    seq = inputdata.tolist()
    RECMcomposition=[]
    countNum = {'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0}
    for i in seq:
      i = str(i)
      if i in countNum:
        value = countNum.get(i)+1
        countNum[i] = value
    #print(countNum)
    for i in countNum:
      oneTi = np.array(energy[int(i)])*int(countNum.get(i))
      # a = GetPseRECM(RECMEncoding(i))
      # i = np.concatenate((oneTi,a),0)
      RECMcomposition.append(oneTi)
    RECMcomposition = np.array(RECMcomposition)
    return RECMcomposition                    #20*20

def GetPseRECM(RECMT):
    feature =[]
    r = 3
    # 取平均特征
    for j in range(20): #20个列均值
      averageColumn = 0
      for i in range(len(RECMT)):
        averageColumn = averageColumn + RECMT[i][j]
      averageColumn = averageColumn/len(RECMT)
      feature.append(averageColumn)
    for k in range(1,r): #2*20,k=1,计算两两相邻行每一列差值平方的均值,k=2,计算两两隔行每一列差值平方的均值。
      for j in range(20):
        dist = 0
        for i in range(len(RECMT)-k):
          dist = dist + pow((RECMT[i][j]-RECMT[i+k][j]),2)
        dist = dist/(len(RECMT)-k)
        feature.append(dist)
    feature = np.array(feature)
    return feature                       #12*5


### 单个氨基酸残基的出现次数
def residueRatio(inpStr):
    numseq = inpStr.tolist()
    feature = []
    countNum = {'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0}
    #countNum = {'A':0,'C':0,'D':0,'E':0,'F':0,'G':0,'H':0,'I':0,'K':0,'L':0,'M':0,'N':0,'P':0,'Q':0,'R':0,'S':0,'T':0,'V':0,'W':0,'Y':0}
    total = 0
    for i in numseq:
        i = str(i)
        if i in countNum:
            value = countNum.get(i)+1
            countNum[i] = value
    for i in countNum:
        oneResidueRatio = countNum.get(i)#/total
        feature.append(oneResidueRatio)
    feature = np.array(feature)
    return feature     #1*20

#相邻氨基酸以二肽形式出现的次数，总组合数为20*20
def dipeptideRatio(inpStr):
    numseq = inpStr.tolist()
    # print(inpStr)
    dipeptideFeature = np.zeros((20,20))
    total = 0
    for i in range(len(numseq)-1):
        total = total+1
        if numseq[i] != 0:
            x = numseq[i]-1
            y = numseq[i+1]-1
        # print(x)
        # print(y)
            dipeptideFeature[x][y] += 1 
    # dipeptideFeature = dipeptideFeature/total
    return dipeptideFeature                 #20*20


def physicochemicalFeature(inpStr,fixlength):
    numseq = inpStr.tolist()
    pfeature=[]
    Slength = 0
    fix = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    for x in numseq:
        x = str(x)
        if x in RE:
            Slength = Slength+1
            oneTi = physicochemical[RE.get(x)]
            pfeature.append(oneTi)
    fixlength = fixlength-Slength
    for i in range(fixlength):
        pfeature.append(fix)
    pfeature = np.array(pfeature)
    return pfeature               #fixlength*20


def featureGenera(t):
  flag = 0 
  for i in t:
    flag += 1
    protein = i
    # print(protein)
    featureOne = RECMcompositionEncoding(protein)  #20*20
    # print(featureOne.shape)
    featureTwo = GetPseRECM(RECMEncoding(protein)) #12*5

    featureThree = dipeptideRatio(protein)  #20*20
    featureFour = residueRatio(protein)     #1*20

    featureFive = physicochemicalFeature(protein,40) #40*20
    # print(featureTwo.shape)
    featureTwo =featureTwo.reshape(3,20)
    featureFour = featureFour.reshape(1,20)

    featureOne = torch.from_numpy(featureOne)
    featureTwo = torch.from_numpy(featureTwo)
    featureThree = torch.from_numpy(featureThree)
    featureFour = torch.from_numpy(featureFour)
    featureFive = torch.from_numpy(featureFive)
    featureThree.type_as(featureTwo)
    featureFour.type_as(featureTwo)
    featureFive.type_as(featureTwo)
    # print(featureOne.shape)
    # print(featureTwo.shape)
    # print(featureThree.shape)
    # print(featureFour.shape)
    feature1 = torch.cat((featureOne,featureTwo),0) #23*20
    # print(feature1.shape)
    feature2 = torch.cat((featureThree,featureFour.type_as(featureThree)),0) #21*20
    # # print(feature2.shape)
    feature3 = torch.cat((feature1,feature2),0) #44*20
    feature = torch.cat((feature3,featureFive),0) #84*20

    # print(feature.shape)
    # print(feature.shape)
    if(flag==1):
      # print(feature.shape)
      feature = feature.unsqueeze(0)
      temp = feature
    if(flag!=1):
      # print(feature.shape)
      feature = feature.unsqueeze(0)
      temp = torch.cat((temp,feature),0)
  # print(temp.shape)
  return temp


def AP3_PhyAndChem(numseq):
  PhyAndChem = [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [4.349,1.2,1.34,1.08,0.687,0.34,0.99,1.2,0.946,0.328,-2.34,-0.729,18.56,0,5.04],
    [4.686,1,  1.07,1.22,0.263,-0.18,2.32,0.8,0.481,0,5.03,-0.408,17.84,0,2.2],
    [4.76, 0.7,3.32,0.86,0.632,0.06,1.18,0.8,1.311,3.379,-0.48,-0.545,17.94,0,5.26],
    [4.295,0.7,2.2 ,1.09,0.669,0.2, 1.36,2.2,0.698,0,1.3,-0.532,17.97,0,6.07],
    [4.663,1,  0.8, 0.96,0.577,0.15,1.25,0.5,0.963,1.336,2.57,-0.454,17.95,0,3.72],
    [3.972,0.8,2.07,0.85,0.67,-0.88,1.4,0.3,0.36,0.5,-1.06,-0.86,18.57,0,7.09],
    [4.63,1.2,1.27,1.02,0.594,-0.09,1.06,0.7,2.168,1.204,-3,-0.519,18.64,1,2.99],
    [4.224,0.8,0.66,0.98,0.564,-0.03,0.81,0.9,1.283,2.078,7.26,-0.361,19.21,0,4.32],
    [4.358,1.7,0.61,1.01,0.407,-0.11,0.91,0.6,1.203,0.835,1.56,-0.508,18.36,1,6.31],
    [4.385,1,0.54,1.04,0.541,0.2,1.26,0.9,1.192,0.414,1.09,-0.462,19.01,0,9.88],
    [4.513,1,0.7,1.11,0.328,0.43,1,0.3,0,0.982,0.62,-0.518,18.49,0,1.85],
    [4.755,1.2,2.49,1.05,0.489,-0.33,1.15,0.7,0.432,1.498,2.81,-0.597,18.24,0,5.94],
    [4.471,1,2.12,0.91,0.6,-0.81,0,2.6,2.093,0.415,-0.15,0, 18.77,0,6.22],
    [4.373,1,1.49,0.95,0.527,0.01,1.52,0.7,1.615,0,0.16,-0.492,18.51,0,4.5],
    [4.396,1.7,0.95,0.93,0.59,0.22,1.19,0.7,1.128,2.088,1.6,-0.535,0,1,3.73],
    [4.498,1.5,0.94,0.95,0.692,-0.35,1.5,0.7,0.523,1.089,1.93,-0.278,18.06,0,8.05],
    [4.346,1,1.09,1.15,0.713,-0.37,1.18,0.8,1.961,1.732,0.19,-0.367,17.71,0,5.2],
    [4.184,0.8,1.32,1.03,0.529,0.13,1.01,1.1,0.409,0.946,2.06,-0.323,18.98,0,6.19],
    [4.702,1,-4.65,1.17,0.632,0.07,1.33,2.1,1.925,1.781,3.59,-0.455,16.87,0,2.1],
    [4.604,1,-0.17,0.8,0.495,-0.31,1.09,1.8,0.802,0,-2.58,-0.439,18.23,0,3.32]]

  PhyAndChemMatrix = []
  for seq in numseq:
    seq = seq.tolist()
    temp = []
    for i in seq:
      temp.append(PhyAndChem[i])
    PhyAndChemMatrix.append(np.array(temp))

  return torch.from_numpy(np.array(PhyAndChemMatrix))

